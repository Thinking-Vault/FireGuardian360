------------------------------------------------------------------------
-- SEQUÊNCIAS
------------------------------------------------------------------------
CREATE SEQUENCE CTS_ID_SEQ START WITH 1 NOCACHE ORDER;
CREATE SEQUENCE LOC_ID_SEQ START WITH 1 NOCACHE ORDER;
CREATE SEQUENCE QMD_ID_SEQ START WITH 1 NOCACHE ORDER;
CREATE SEQUENCE SND_ID_SEQ START WITH 1 NOCACHE ORDER;
CREATE SEQUENCE SNS_ID_SEQ START WITH 1 NOCACHE ORDER;
CREATE SEQUENCE USR_ID_SEQ START WITH 1 NOCACHE ORDER;
CREATE SEQUENCE VGT_ID_SEQ START WITH 1 NOCACHE ORDER;
------------------------------------------------------------------------
-- TABELA: USER
------------------------------------------------------------------------
CREATE TABLE "USER" (
    ID_USR NUMBER NOT NULL,
    NM_USR_NAME VARCHAR2(100 CHAR) NOT NULL,
    EM_USR_EMAIL VARCHAR2(100 CHAR) NOT NULL,
    TP_USR_ROLE VARCHAR2(20 CHAR) NOT NULL,
    DH_USR_CREATED_AT TIMESTAMP WITH LOCAL TIME ZONE,
    NR_USR_TELEFONE VARCHAR2(20 CHAR),
    CONSTRAINT PK_USER PRIMARY KEY (ID_USR)
);
COMMENT ON TABLE "USER" IS 'Cadastro de todos os usuários do sistema.';
COMMENT ON COLUMN "USER".ID_USR IS 'PK e identificador único do usuário.';
COMMENT ON COLUMN "USER".TP_USR_ROLE IS 'Perfil (ADMIN, OPERADOR, VOLUNTARIO, COMUNIDADE).';
------------------------------------------------------------------------
-- TABELA: VEGETATION
------------------------------------------------------------------------
CREATE TABLE VEGETATION (
    ID_VGT VARCHAR2(36 CHAR) NOT NULL,
    NM_VGT_NAME VARCHAR2(100 CHAR) NOT NULL,
    PC_VGT_FLAMMABILITY NUMBER(5, 2) NOT NULL,
    DS_VGT_CARACTERISTICA VARCHAR2(4000 CHAR) NOT NULL,
    CONSTRAINT PK_VEGETATION PRIMARY KEY (ID_VGT)
);
COMMENT ON TABLE VEGETATION IS 'Tipos de vegetação e probabilidade de propagação do fogo.';
------------------------------------------------------------------------
-- TABELA: SENSOR
------------------------------------------------------------------------
CREATE TABLE SENSOR (
    ID_SNS NUMBER NOT NULL,
    NM_SNS_MODEL VARCHAR2(100 CHAR) NOT NULL,
    TP_SNS_TYPE VARCHAR2(20 CHAR) NOT NULL,
    ST_SNS_STATUS VARCHAR2(20 CHAR) NOT NULL,
    CONSTRAINT PK_SENSOR PRIMARY KEY (ID_SNS)
);
COMMENT ON TABLE SENSOR IS 'Modelos, tipos e status dos sensores.';
------------------------------------------------------------------------
-- TABELA: LOCALIZACAO
------------------------------------------------------------------------
CREATE TABLE LOCALIZACAO (
    ID_LOC NUMBER NOT NULL,
    NM_LOC_REGIAO VARCHAR2(100 CHAR) NOT NULL,
    SG_LOC_UF CHAR(2 CHAR) NOT NULL,
    NR_LOC_LAT NUMBER(9, 6) NOT NULL,
    NR_LOC_LNG NUMBER(9, 6) NOT NULL,
    CONSTRAINT PK_LOCALIZACAO PRIMARY KEY (ID_LOC)
);
COMMENT ON TABLE LOCALIZACAO IS 'Regiões e estações com coordenadas geográficas.';
------------------------------------------------------------------------
-- TABELA: QUEIMADA
------------------------------------------------------------------------
CREATE TABLE QUEIMADA (
    ID_QMD NUMBER NOT NULL,
    ID_LOC NUMBER NOT NULL,
    ID_SNS NUMBER NOT NULL,
    ID_VGT VARCHAR2(36 CHAR) NOT NULL,
    DT_QMD_OCORRENCIA TIMESTAMP(6) NOT NULL,
    TP_QMD_INTENSIDADE VARCHAR2(20 CHAR) NOT NULL,
    CONSTRAINT PK_QUEIMADA PRIMARY KEY (ID_QMD),
    CONSTRAINT FK_QMD_LOC FOREIGN KEY (ID_LOC) REFERENCES LOCALIZACAO(ID_LOC),
    CONSTRAINT FK_QMD_SNS FOREIGN KEY (ID_SNS) REFERENCES SENSOR(ID_SNS),
    CONSTRAINT FK_QMD_VGT FOREIGN KEY (ID_VGT) REFERENCES VEGETATION(ID_VGT)
);
COMMENT ON TABLE QUEIMADA IS 'Focos de incêndio detectados e suas características.';
------------------------------------------------------------------------
-- TABELA: ACAO_COMBATE
------------------------------------------------------------------------
CREATE TABLE ACAO_COMBATE (
    ID_QMD NUMBER NOT NULL,
    ID_ACB NUMBER NOT NULL,
    DT_ACB_EXECUCAO TIMESTAMP(6) NOT NULL,
    TP_ACB_TIPO VARCHAR2(20 CHAR) NOT NULL,
    DS_ACB_RESULTADO VARCHAR2(4000 CHAR),
    CONSTRAINT PK_ACAO_COMBATE PRIMARY KEY (ID_QMD, ID_ACB),
    CONSTRAINT FK_ACB_QMD FOREIGN KEY (ID_QMD) REFERENCES QUEIMADA(ID_QMD)
);
------------------------------------------------------------------------
-- TABELA: ALERT
------------------------------------------------------------------------
CREATE TABLE ALERT (
    ID_ALT NUMBER NOT NULL,
    ID_QMD NUMBER NOT NULL,
    ID_USR NUMBER NOT NULL,
    TP_ALT_TYPE VARCHAR2(50 CHAR) NOT NULL,
    NR_ALT_LEVEL NUMBER(1) NOT NULL,
    DH_ALT_CREATED_AT TIMESTAMP(6) NOT NULL,
    NR_ALT_LNG NUMBER(9, 6) NOT NULL,
    ID_ALT_EXT VARCHAR2(36 CHAR) NOT NULL,
    CONSTRAINT PK_ALERT PRIMARY KEY (ID_ALT),
    CONSTRAINT FK_ALT_QMD FOREIGN KEY (ID_QMD) REFERENCES QUEIMADA(ID_QMD),
    CONSTRAINT FK_ALT_USR FOREIGN KEY (ID_USR) REFERENCES "USER"(ID_USR)
);
------------------------------------------------------------------------
-- TABELA: SENSOR_DATA
------------------------------------------------------------------------
CREATE TABLE SENSOR_DATA (
    ID_SND NUMBER NOT NULL,
    ID_SNS NUMBER NOT NULL,
    ID_VGT VARCHAR2(36 CHAR) NOT NULL,
    DH_SND_COLETA TIMESTAMP(6) NOT NULL,
    TP_SND_MEDIDA VARCHAR2(50 CHAR) NOT NULL,
    VL_SND_VALOR NUMBER(12, 4) NOT NULL,
    NR_SND_LAT NUMBER(9, 6) NOT NULL,
    NR_SND_LNG NUMBER(9, 6) NOT NULL,
    ID_ALT NUMBER NOT NULL,
    CONSTRAINT PK_SENSOR_DATA PRIMARY KEY (ID_SND),
    CONSTRAINT FK_SND_SNS FOREIGN KEY (ID_SNS) REFERENCES SENSOR(ID_SNS),
    CONSTRAINT FK_SND_VGT FOREIGN KEY (ID_VGT) REFERENCES VEGETATION(ID_VGT),
    CONSTRAINT FK_SND_ALT FOREIGN KEY (ID_ALT) REFERENCES ALERT(ID_ALT)
);
------------------------------------------------------------------------
-- TABELA: FIRE_HISTORY
------------------------------------------------------------------------
CREATE TABLE FIRE_HISTORY (
    ID_FIH VARCHAR2(36 CHAR) NOT NULL,
    ID_QMD NUMBER NOT NULL,
    ID_VGT VARCHAR2(36 CHAR) NOT NULL,
    DT_FIH_START DATE NOT NULL,
    DT_FIH_END DATE NOT NULL,
    VL_FIH_AREA_BURNED NUMBER(12, 2) NOT NULL,
    DS_FIH_RECURSOS VARCHAR2(4000 CHAR) NOT NULL,
    CONSTRAINT PK_FIH PRIMARY KEY (ID_FIH),
    CONSTRAINT FK_FIH_QMD FOREIGN KEY (ID_QMD) REFERENCES QUEIMADA(ID_QMD),
    CONSTRAINT FK_FIH_VGT FOREIGN KEY (ID_VGT) REFERENCES VEGETATION(ID_VGT)
);
------------------------------------------------------------------------
-- TABELA: CHECKLIST_ITEM
------------------------------------------------------------------------
CREATE TABLE CHECKLIST_ITEM (
    ID_CKI VARCHAR2(36 CHAR) NOT NULL,
    ID_USR NUMBER NOT NULL,
    ID_ALT NUMBER NOT NULL,
    NM_CKI_LABEL VARCHAR2(200 CHAR) NOT NULL,
    TP_CKI_STATUS VARCHAR2(20 CHAR) NOT NULL,
    CONSTRAINT PK_CKI PRIMARY KEY (ID_CKI),
    CONSTRAINT FK_CKI_USR FOREIGN KEY (ID_USR) REFERENCES "USER"(ID_USR),
    CONSTRAINT FK_CKI_ALT FOREIGN KEY (ID_ALT) REFERENCES ALERT(ID_ALT)
);
------------------------------------------------------------------------
-- TABELA: CHAT_SESSION
------------------------------------------------------------------------
CREATE TABLE CHAT_SESSION (
    ID_CTS NUMBER NOT NULL,
    ID_USR NUMBER NOT NULL,
    ID_CTS_UUID VARCHAR2(36 CHAR) NOT NULL,
    ID_ALT NUMBER NOT NULL,
    CONSTRAINT PK_CTS PRIMARY KEY (ID_CTS),
    CONSTRAINT FK_CTS_USR FOREIGN KEY (ID_USR) REFERENCES "USER"(ID_USR),
    CONSTRAINT FK_CTS_ALT FOREIGN KEY (ID_ALT) REFERENCES ALERT(ID_ALT)
);
------------------------------------------------------------------------
-- TABELA: CHAT_MESSAGE
------------------------------------------------------------------------
CREATE TABLE CHAT_MESSAGE (
    ID_CTM NUMBER NOT NULL,
    ID_CTS NUMBER NOT NULL,
    TX_CTM_CONTENT CLOB NOT NULL,
    TX_CTM_PREVIEW VARCHAR2(4000 CHAR) NOT NULL,
    ID_USR NUMBER NOT NULL,
    CONSTRAINT PK_CTM PRIMARY KEY (ID_CTM),
    CONSTRAINT FK_CTM_CTS FOREIGN KEY (ID_CTS) REFERENCES CHAT_SESSION(ID_CTS),
    CONSTRAINT FK_CTM_USR FOREIGN KEY (ID_USR) REFERENCES "USER"(ID_USR)
);
------------------------------------------------------------------------
-- TABELA: SHELTER
------------------------------------------------------------------------
CREATE TABLE SHELTER (
    ID_SHL NUMBER NOT NULL,
    NM_SHL_NAME VARCHAR2(150 CHAR) NOT NULL,
    NR_SHL_LAT NUMBER(9, 6) NOT NULL,
    NR_SHL_LNG NUMBER(9, 6) NOT NULL,
    QT_SHL_CAPACITY NUMBER(5) NOT NULL,
    QT_SHL_AVAILABLE NUMBER(5) NOT NULL,
    CONSTRAINT PK_SHL PRIMARY KEY (ID_SHL)
);
------------------------------------------------------------------------
-- TRIGGERS (auto-increment)
------------------------------------------------------------------------
CREATE OR REPLACE TRIGGER TRG_USER_ID BEFORE
INSERT ON "USER" FOR EACH ROW
    WHEN (NEW.ID_USR IS NULL) BEGIN :NEW.ID_USR := USR_ID_SEQ.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER TRG_VGT_ID BEFORE
INSERT ON VEGETATION FOR EACH ROW
    WHEN (NEW.ID_VGT IS NULL) BEGIN :NEW.ID_VGT := VGT_ID_SEQ.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER TRG_SENSOR_ID BEFORE
INSERT ON SENSOR FOR EACH ROW
    WHEN (NEW.ID_SNS IS NULL) BEGIN :NEW.ID_SNS := SNS_ID_SEQ.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER TRG_LOC_ID BEFORE
INSERT ON LOCALIZACAO FOR EACH ROW
    WHEN (NEW.ID_LOC IS NULL) BEGIN :NEW.ID_LOC := LOC_ID_SEQ.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER TRG_QMD_ID BEFORE
INSERT ON QUEIMADA FOR EACH ROW
    WHEN (NEW.ID_QMD IS NULL) BEGIN :NEW.ID_QMD := QMD_ID_SEQ.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER TRG_SND_ID BEFORE
INSERT ON SENSOR_DATA FOR EACH ROW
    WHEN (NEW.ID_SND IS NULL) BEGIN :NEW.ID_SND := SND_ID_SEQ.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER TRG_CTS_ID BEFORE
INSERT ON CHAT_SESSION FOR EACH ROW
    WHEN (NEW.ID_CTS IS NULL) BEGIN :NEW.ID_CTS := CTS_ID_SEQ.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER VGT_VGT_ID_TRG BEFORE
INSERT ON VEGETATION FOR EACH ROW
    WHEN (NEW.VGT_ID IS NULL) BEGIN :NEW.VGT_ID := VGT_VGT_ID_SEQ.NEXTVAL;
END;
/