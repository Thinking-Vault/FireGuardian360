CREATE SEQUENCE CTS_CTS_ID_SEQ START WITH 1 NOCACHE ORDER;
CREATE SEQUENCE LOC_LOC_ID_SEQ START WITH 1 NOCACHE ORDER;
CREATE SEQUENCE QMD_QMD_ID_SEQ START WITH 1 NOCACHE ORDER;
CREATE SEQUENCE SND_SND_ID_SEQ START WITH 1 NOCACHE ORDER;
CREATE SEQUENCE SNS_SNS_ID_SEQ START WITH 1 NOCACHE ORDER;
CREATE SEQUENCE USR_USR_ID_SEQ START WITH 1 NOCACHE ORDER;
CREATE SEQUENCE VGT_VGT_ID_SEQ START WITH 1 NOCACHE ORDER;
CREATE TABLE ACAO_COMBATE (
    QUEIMADA_QMD_ID NUMBER NOT NULL,
    ID_QMD NUMBER NOT NULL,
    DT_ACB_EXECUCAO TIMESTAMP NOT NULL,
    TP_ACB_TIPO VARCHAR2 (20 CHAR) NOT NULL,
    DS_ACB_RESULTADO VARCHAR2 (4000 CHAR),
    CONSTRAINT PK_ACAO_COMBATE PRIMARY KEY (QUEIMADA_QMD_ID, ID_QMD)
);
COMMENT ON TABLE ACAO_COMBATE IS 'Registra as ações de combate em focos de queimada.';
COMMENT ON COLUMN ACAO_COMBATE.QUEIMADA_QMD_ID IS 'FK para a tabela QUEIMADA, identifica o foco de queimada.';
COMMENT ON COLUMN ACAO_COMBATE.ID_QMD IS 'Identificador único da ação de combate.';
COMMENT ON COLUMN ACAO_COMBATE.DT_ACB_EXECUCAO IS 'Data e hora em que a ação de combate foi realizada.';
COMMENT ON COLUMN ACAO_COMBATE.TP_ACB_TIPO IS 'Tipo de ação de combate (ex.: Pulverização, Resfriamento, Contenção).';
COMMENT ON COLUMN ACAO_COMBATE.DS_ACB_RESULTADO IS 'Descrição do resultado observado após a ação de combate.';
CREATE TABLE ALERT (
    SENSOR_DATA_SND_ID NUMBER NOT NULL,
    QUEIMADA_QMD_ID NUMBER NOT NULL,
    USER_USR_ID NUMBER NOT NULL,
    ID_USR NUMBER NOT NULL,
    ID_ALT_ALERT NUMBER NOT NULL,
    TP_ALT_TYPE VARCHAR2 (50 CHAR) NOT NULL,
    NR_ALT_LEVEL NUMBER (1) NOT NULL,
    DH_ALT_CREATED_AT TIMESTAMP NOT NULL,
    NR_ALT_LNG NUMBER (9, 6) NOT NULL,
    ID_ALT_ALERT_5 VARCHAR2 (36 CHAR) NOT NULL,
    ID_QMD NUMBER NOT NULL,
    CONSTRAINT PK_ALERT PRIMARY KEY (ID_ALT_ALERT)
);
COMMENT ON TABLE ALERT IS 'Registra alertas gerados por sensores ou usuários.';
COMMENT ON COLUMN ALERT.SENSOR_DATA_SND_ID IS 'FK para SENSOR_DATA, identifica o sensor que gerou o alerta.';
COMMENT ON COLUMN ALERT.QUEIMADA_QMD_ID IS 'FK para QUEIMADA, quando o alerta é relacionado a um foco identificado.';
COMMENT ON COLUMN ALERT.USER_USR_ID IS 'FK para USUARIO, usuário que confirmou/acionou o alerta.';
COMMENT ON COLUMN ALERT.ID_USR IS 'Identificador interno do usuário na sessão.';
COMMENT ON COLUMN ALERT.TP_ALT_TYPE IS 'Tipo de alerta (ex.: Fumaça, Chama, Nível Crítico).';
COMMENT ON COLUMN ALERT.NR_ALT_LEVEL IS 'Nível de severidade do alerta (0-9).';
COMMENT ON COLUMN ALERT.DH_ALT_CREATED_AT IS 'Data e hora de criação do alerta.';
COMMENT ON COLUMN ALERT.NR_ALT_LNG IS 'Longitude do ponto de alerta (graus decimais).';
COMMENT ON COLUMN ALERT.ID_ALT_ALERT_5 IS 'UUID externo do alerta para integração com sistemas terceiros.';
COMMENT ON COLUMN ALERT.ID_QMD IS 'ID de queimada associado, sinônimo de QUEIMADA_QMD_ID.';
CREATE TABLE CHAT_MESSAGE (
    CHAT_SESSION_CTS_ID NUMBER NOT NULL,
    ID_CTM_MESSAGE NUMBER NOT NULL,
    TX_CTM_CONTENT CLOB NOT NULL,
    ID_CTS_SESSION VARCHAR2 (36 CHAR) NOT NULL,
    TX_CTM_CONTENT_1 VARCHAR2 (4000 CHAR) NOT NULL,
    CHAT_SESSION_ID_USR NUMBER NOT NULL,
    CONSTRAINT PK_CHAT_MESSAGE PRIMARY KEY (ID_CTM_MESSAGE)
);
COMMENT ON TABLE CHAT_MESSAGE IS 'Mensagens trocadas em cada sessão de chat.';
COMMENT ON COLUMN CHAT_MESSAGE.CHAT_SESSION_CTS_ID IS 'FK para CHAT_SESSION, identifica a sessão de chat.';
COMMENT ON COLUMN CHAT_MESSAGE.ID_CTM_MESSAGE IS 'Identificador único da mensagem.';
COMMENT ON COLUMN CHAT_MESSAGE.TX_CTM_CONTENT IS 'Conteúdo completo da mensagem (CLOB).';
COMMENT ON COLUMN CHAT_MESSAGE.ID_CTS_SESSION IS 'UUID da sessão de chat para rastreamento externo.';
COMMENT ON COLUMN CHAT_MESSAGE.TX_CTM_CONTENT_1 IS 'Pré-visualização ou resumo da mensagem (até 4000 chars).';
COMMENT ON COLUMN CHAT_MESSAGE.CHAT_SESSION_ID_USR IS 'ID do usuário autor da mensagem naquele chat.';
CREATE TABLE CHAT_SESSION (
    CTS_ID NUMBER NOT NULL,
    USER_USR_ID NUMBER NOT NULL,
    ID_USR NUMBER NOT NULL,
    ID_CTS_SESSION VARCHAR2 (36 CHAR) NOT NULL,
    ID_ALT_ALERT_1 VARCHAR2 (36 CHAR) NOT NULL,
    CONSTRAINT CHAT_SESSION_PK PRIMARY KEY (ID_CTS_SESSION, ID_USR),
    CONSTRAINT CHAT_SESSION_UQ_CTS_ID UNIQUE (CTS_ID)
);
COMMENT ON TABLE CHAT_SESSION IS 'Sessões de chat entre usuário e sistema.';
COMMENT ON COLUMN CHAT_SESSION.CTS_ID IS 'Identificador sequencial da sessão de chat.';
COMMENT ON COLUMN CHAT_SESSION.USER_USR_ID IS 'FK para USUARIO, usuário que iniciou a sessão.';
COMMENT ON COLUMN CHAT_SESSION.ID_USR IS 'ID interno do usuário nesta sessão.';
COMMENT ON COLUMN CHAT_SESSION.ID_CTS_SESSION IS 'UUID global da sessão de chat.';
COMMENT ON COLUMN CHAT_SESSION.ID_ALT_ALERT_1 IS 'UUID do alerta associado, caso a sessão seja disparada por um alerta.';
CREATE TABLE CHECKLIST_ITEM (
    USER_USR_ID NUMBER NOT NULL,
    ID_USR NUMBER NOT NULL,
    ID_CKI_ITEM VARCHAR2 (36 CHAR) NOT NULL,
    NM_CKI_LABEL VARCHAR2 (200 CHAR) NOT NULL,
    TP_CKI_STATUS VARCHAR2 (20 CHAR) NOT NULL,
    ID_ALT_ALERT_3 VARCHAR2 (36 CHAR) NOT NULL,
    CONSTRAINT PK_CHECKLIST_ITEM PRIMARY KEY (ID_CKI_ITEM)
);
COMMENT ON TABLE CHECKLIST_ITEM IS 'Itens de checklist vinculados a alertas e usuários.';
COMMENT ON COLUMN CHECKLIST_ITEM.USER_USR_ID IS 'FK para USUARIO, dono do item de checklist.';
COMMENT ON COLUMN CHECKLIST_ITEM.ID_USR IS 'ID interno do usuário na sessão.';
COMMENT ON COLUMN CHECKLIST_ITEM.NM_CKI_LABEL IS 'Texto descritivo do item de checklist.';
COMMENT ON COLUMN CHECKLIST_ITEM.TP_CKI_STATUS IS 'Status do item (ex.: PENDENTE, CONCLUÍDO).';
COMMENT ON COLUMN CHECKLIST_ITEM.ID_ALT_ALERT_3 IS 'UUID do alerta associado ao checklist.';
CREATE TABLE FIRE_HISTORY (
    QUEIMADA_QMD_ID NUMBER NOT NULL,
    VEGETATION_VGT_ID NUMBER NOT NULL,
    ID_FIH_FIRE VARCHAR2 (36 CHAR) NOT NULL,
    DT_FIH_START DATE NOT NULL,
    DT_FIH_END DATE NOT NULL,
    VL_FIH_AREA_BURNED NUMBER (12, 2) NOT NULL,
    DS_FIH_RESOURCES VARCHAR2 (4000 CHAR) NOT NULL,
    ID_VGT_VEGETATION VARCHAR2 (36 CHAR) NOT NULL,
    ID_QMD NUMBER NOT NULL,
    CONSTRAINT PK_FIRE_HISTORY PRIMARY KEY (ID_FIH_FIRE)
);
COMMENT ON TABLE FIRE_HISTORY IS 'Armazena o histórico detalhado de cada evento de queimada.';
COMMENT ON COLUMN FIRE_HISTORY.DT_FIH_START IS 'Data de início da queimada.';
COMMENT ON COLUMN FIRE_HISTORY.DT_FIH_END IS 'Data de extinção ou controle da queimada.';
COMMENT ON COLUMN FIRE_HISTORY.VL_FIH_AREA_BURNED IS 'Área afetada pela queimada em hectares.';
COMMENT ON COLUMN FIRE_HISTORY.DS_FIH_RESOURCES IS 'Recursos utilizados no combate (e.g., água, retardantes).';
CREATE TABLE LOCALIZACAO (
    LOC_ID NUMBER NOT NULL,
    ID_LOC NUMBER NOT NULL,
    NM_LOC_REGIAO VARCHAR2 (100 CHAR) NOT NULL,
    SG_LOC_UF CHAR (2 CHAR) NOT NULL,
    NR_LOC_LATITUDE NUMBER (9, 6) NOT NULL,
    NR_LOC_LONGITUDE NUMBER (9, 6) NOT NULL,
    SENSOR_DATA_SND_ID NUMBER NOT NULL,
    CONSTRAINT PK_LOCALIZACAO PRIMARY KEY (ID_LOC),
    CONSTRAINT UQ_LOCALIZACAO_LOC_ID UNIQUE (LOC_ID)
);
CREATE TABLE QUEIMADA (
    QMD_ID NUMBER NOT NULL,
    LOCALIZACAO_LOC_ID NUMBER NOT NULL,
    SENSOR_SNS_ID NUMBER NOT NULL,
    VEGETATION_VGT_ID NUMBER NOT NULL,
    ID_VGT_VEGETATION NUMBER NOT NULL,
    ID_LOC NUMBER NOT NULL,
    ID_SNS_SENSOR NUMBER NOT NULL,
    ID_QMD NUMBER NOT NULL,
    DT_QMD_OCORRENCIA TIMESTAMP NOT NULL,
    TP_QMD_INTENSIDADE VARCHAR2 (20 CHAR) NOT NULL,
    CONSTRAINT PK_QUEIMADA PRIMARY KEY (ID_QMD),
    CONSTRAINT UQ_QUEIMADA_QMD_ID UNIQUE (QMD_ID),
    CONSTRAINT QUEIMADA_LOCALIZACAO_FK FOREIGN KEY (ID_LOC) REFERENCES LOCALIZACAO (LOC_ID) NOT DEFERRABLE,
    CONSTRAINT QUEIMADA_SENSOR_FK FOREIGN KEY (ID_SNS_SENSOR) REFERENCES SENSOR (SNS_ID) NOT DEFERRABLE,
    CONSTRAINT QUEIMADA_VEGETATION_FK FOREIGN KEY (ID_VGT_VEGETATION) REFERENCES VEGETATION (VGT_ID) NOT DEFERRABLE
);
CREATE TABLE SENSOR_DATA (
    SND_ID NUMBER NOT NULL,
    SENSOR_SNS_ID NUMBER NOT NULL,
    VEGETATION_VGT_ID NUMBER NOT NULL,
    ID_ALT_ALERT VARCHAR2 (36 CHAR) NOT NULL,
    DH_SND_COLLECTED_AT TIMESTAMP NOT NULL,
    TP_SND_MEASURE VARCHAR2 (50 CHAR) NOT NULL,
    VL_SND_VALUE NUMBER (12, 4) NOT NULL,
    NR_SND_LAT NUMBER (9, 6) NOT NULL,
    NR_SND_LNG NUMBER (9, 6) NOT NULL,
    ID_VGT_VEGETATION NUMBER NOT NULL,
    ID_SNS_SENSOR NUMBER NOT NULL,
    CONSTRAINT PK_SENSOR_DATA PRIMARY KEY (SND_ID),
    CONSTRAINT SENSOR_DATA_SENSOR_FK FOREIGN KEY (ID_SNS_SENSOR) REFERENCES SENSOR (SNS_ID) NOT DEFERRABLE,
    CONSTRAINT SENSOR_DATA_VEGETATION_FK FOREIGN KEY (ID_VGT_VEGETATION) REFERENCES VEGETATION (VGT_ID) NOT DEFERRABLE
);
COMMENT ON TABLE SENSOR_DATA IS 'Tabela de dados coletados pelos sensores.';
COMMENT ON COLUMN SENSOR_DATA.SND_ID IS 'Identificador único do dado do sensor.';
COMMENT ON COLUMN SENSOR_DATA.SENSOR_SNS_ID IS 'FK para SENSOR.';
COMMENT ON COLUMN SENSOR_DATA.VEGETATION_VGT_ID IS 'FK para VEGETATION.';
COMMENT ON COLUMN SENSOR_DATA.ID_ALT_ALERT IS 'UUID do alerta relacionado.';
COMMENT ON COLUMN SENSOR_DATA.DH_SND_COLLECTED_AT IS 'Data/hora da coleta.';
COMMENT ON COLUMN SENSOR_DATA.TP_SND_MEASURE IS 'Tipo de medida.';
COMMENT ON COLUMN SENSOR_DATA.VL_SND_VALUE IS 'Valor medido.';
COMMENT ON COLUMN SENSOR_DATA.NR_SND_LAT IS 'Latitude.';
COMMENT ON COLUMN SENSOR_DATA.NR_SND_LNG IS 'Longitude.';
COMMENT ON COLUMN SENSOR_DATA.ID_VGT_VEGETATION IS 'FK para VEGETATION (redundante).';
COMMENT ON COLUMN SENSOR_DATA.ID_SNS_SENSOR IS 'FK para SENSOR (redundante).';
CREATE TABLE SHELTER (
    USER_USR_ID NUMBER NOT NULL,
    ID_USR NUMBER NOT NULL,
    NM_SHL_NAME VARCHAR2 (150 CHAR) NOT NULL,
    NR_SHL_LAT NUMBER (9, 6) NOT NULL,
    NR_SHL_LNG NUMBER (9, 6) NOT NULL,
    QT_SHL_CAPACITY NUMBER (5) NOT NULL,
    QT_SHL_AVAILABLE NUMBER (5) NOT NULL,
    ID_SHL NUMBER NOT NULL,
    LOCALIZACAO_ID_LOC NUMBER NOT NULL,
    CONSTRAINT PK_SHELTER PRIMARY KEY (ID_SHL),
    CONSTRAINT SHELTER_LOCALIZACAO_FK FOREIGN KEY (LOCALIZACAO_ID_LOC) REFERENCES LOCALIZACAO (ID_LOC) NOT DEFERRABLE,
    CONSTRAINT SHELTER_USER_FK FOREIGN KEY (ID_USR) REFERENCES "USER" (USR_ID) NOT DEFERRABLE
) LOGGING;
COMMENT ON TABLE SHELTER IS 'Abrigos comunitários para evacuação.';
CREATE TABLE "USER" (
    USR_ID NUMBER NOT NULL,
    ID_USR NUMBER NOT NULL,
    NM_USR_NAME VARCHAR2 (100 CHAR) NOT NULL,
    EM_USR_EMAIL VARCHAR2 (100 CHAR) NOT NULL,
    TP_USR_ROLE VARCHAR2 (20 CHAR) NOT NULL,
    DH_USR_CREATED_AT TIMESTAMP WITH LOCAL TIME ZONE,
    NR_USR_TELEFONE VARCHAR2 (20 CHAR),
    CONSTRAINT PK_USER PRIMARY KEY (ID_USR),
    CONSTRAINT UQ_USER_USR_ID UNIQUE (USR_ID)
) LOGGING;
COMMENT ON TABLE "USER" IS 'Cadastro dos usuários do sistema.';
CREATE TABLE VEGETATION (
    VGT_ID NUMBER NOT NULL,
    ID_VGT VARCHAR2 (36 CHAR) NOT NULL,
    NM_VGT_NAME VARCHAR2 (100 CHAR) NOT NULL,
    PC_VGT_FLAMMABILITY NUMBER (5, 2) NOT NULL,
    DS_VGT_CARACTERISTICA VARCHAR2 (4000 CHAR) NOT NULL,
    CONSTRAINT PK_VEGETATION PRIMARY KEY (ID_VGT),
    CONSTRAINT UQ_VEGETATION_VGT_ID UNIQUE (VGT_ID)
) LOGGING;
COMMENT ON TABLE VEGETATION IS 'Tipos de vegetação e inflamabilidade.';
ALTER TABLE VEGETATION
ADD CONSTRAINT PK_VEGETATION PRIMARY KEY (ID_VGT),
    ADD CONSTRAINT UQ_VEGETATION_VGT_ID UNIQUE (VGT_ID);
ALTER TABLE QUEIMADA
ADD CONSTRAINT QUEIMADA_LOCALIZACAO_FK FOREIGN KEY (ID_LOC) REFERENCES LOCALIZACAO (LOC_ID) NOT DEFERRABLE,
    ADD CONSTRAINT QUEIMADA_SENSOR_FK FOREIGN KEY (ID_SNS_SENSOR) REFERENCES SENSOR (SNS_ID) NOT DEFERRABLE,
    ADD CONSTRAINT QUEIMADA_VEGETATION_FK FOREIGN KEY (ID_VGT_VEGETATION) REFERENCES VEGETATION (VGT_ID) NOT DEFERRABLE;
ALTER TABLE SENSOR_DATA
ADD CONSTRAINT SENSOR_DATA_SENSOR_FK FOREIGN KEY (ID_SNS_SENSOR) REFERENCES SENSOR (SNS_ID) NOT DEFERRABLE,
    ADD CONSTRAINT SENSOR_DATA_VEGETATION_FK FOREIGN KEY (ID_VGT_VEGETATION) REFERENCES VEGETATION (VGT_ID) NOT DEFERRABLE;
ALTER TABLE SHELTER
ADD CONSTRAINT SHELTER_LOCALIZACAO_FK FOREIGN KEY (LOCALIZACAO_ID_LOC) REFERENCES LOCALIZACAO (ID_LOC) NOT DEFERRABLE,
    ADD CONSTRAINT SHELTER_USER_FK FOREIGN KEY (ID_USR) REFERENCES "USER" (USR_ID) NOT DEFERRABLE;
CREATE OR REPLACE TRIGGER CTS_CTS_ID_TRG BEFORE
INSERT ON CHAT_SESSION FOR EACH ROW
    WHEN (NEW.CTS_ID IS NULL) BEGIN :NEW.CTS_ID := CTS_CTS_ID_SEQ.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER LOC_LOC_ID_TRG BEFORE
INSERT ON LOCALIZACAO FOR EACH ROW
    WHEN (NEW.LOC_ID IS NULL) BEGIN :NEW.LOC_ID := LOC_LOC_ID_SEQ.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER QMD_QMD_ID_TRG BEFORE
INSERT ON QUEIMADA FOR EACH ROW
    WHEN (NEW.QMD_ID IS NULL) BEGIN :NEW.QMD_ID := QMD_QMD_ID_SEQ.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER SNS_SNS_ID_TRG BEFORE
INSERT ON SENSOR FOR EACH ROW
    WHEN (NEW.SNS_ID IS NULL) BEGIN :NEW.SNS_ID := SNS_SNS_ID_SEQ.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER SND_SND_ID_TRG BEFORE
INSERT ON SENSOR_DATA FOR EACH ROW
    WHEN (NEW.SND_ID IS NULL) BEGIN :NEW.SND_ID := SND_SND_ID_SEQ.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER USR_USR_ID_TRG BEFORE
INSERT ON "USER" FOR EACH ROW
    WHEN (NEW.USR_ID IS NULL) BEGIN :NEW.USR_ID := USR_USR_ID_SEQ.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER VGT_VGT_ID_TRG BEFORE
INSERT ON VEGETATION FOR EACH ROW
    WHEN (NEW.VGT_ID IS NULL) BEGIN :NEW.VGT_ID := VGT_VGT_ID_SEQ.NEXTVAL;
END;
/